<?php


namespace Ayesh\ComposerPreload;


class PreloadWriter {
  private $list;
  private $count;

  public function __construct(PreloadList $list) {
    $this->list = $list;
  }

  private function getHeader(): string {
    return <<< HEADER
<?php

/**
 * Opcache warm file generated by Composer Preload file.
 * This file was generated automatically. Any changes will be overwritten
 * during the next "composer preload" command. 
 */
 
if (!function_exists('opcache_compile_file') || empty(opcache_get_configuration()['directives']['opcache.enable'])) {
  echo "Opcache is not available.";
  die(1);
}
 
// Cache files to opcache.
HEADER;
  }

  private function genCacheLine(string $file_path): string {
    return 'opcache_compile_file( "'. addslashes($file_path) . '");' . PHP_EOL;
  }

  public function getScript(): string {
    $this->count = 0;
    $list = $this->getHeader();
    $list .= PHP_EOL;
    foreach ($this->list as $file) {
      /**
       * @var $file \SplFileInfo
       */
      $list .= $this->genCacheLine($file->getRealPath());
      ++$this->count;
    }

    return $list;
  }

  public function write(): void {
    $status = file_put_contents('vendor/preload.php', $this->getScript());
    if (!$status) {
      throw new \RuntimeException('Error writing the preload file.');
    }
  }

  public function getCount(): int {
    if ($this->count === NULL) {
      throw new \BadMethodCallException('File count is not available until iterated.');
    }
    return $this->count;
  }
}
